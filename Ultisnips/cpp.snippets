# Basic cpp snippet
snippet cpp "cpp code initialization"
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

int main() {
	${1}

	return 0;
}
endsnippet

snippet #inc "new header"
#include <${1}>
endsnippet

snippet con "const"
const int N = ${1}
endsnippet

snippet for "for loop: for (int i = 0; i < n; i++)"
for (int ${1} = ${2}; ${3}; ${4})
	${0}
endsnippet

snippet long "typedef long long LL"
typedef long long LL;
${0}
endsnippet

# algorithm snippet
snippet dxdy
int dx[] = {-1, 0, 1, 0}, dy[] = {0, -1, 0, 1};
${0}
endsnippet

snippet intlo "lowbit"
int lowbit(int x) {
	return x & -x;
}
${0}
endsnippet

snippet intlo "tree array"
int lowbit(int x) {
	return x & -x;
}

void update(int x, int c) {
	for (int i = x; i <= n; i += lowbit(i))
		tr[i] += c;
}

int query(int x) {
	int res = 0;
	for (int i = x; i; i -= lowbit(i))
		res += tr[i];
	return res;
}

endsnippet

snippet vadd "vector<int> add"
vector<int> add(vector<int> &A, vector<int> &B) {
	if (A.size() < B.size())
		return add(B, A);
	
	vector<int> C;
	for (int i = 0, t = 0; i < A.size() || t; i++) {
		if (i < A.size())
			t += A[i];
		if (i < B.size())
			t += B[i];
		C.push_back(t % 10);
		t /= 10;
	}

	return C;
}

endsnippet

snippet vsub "vector<int> sub"
vector<int> sub(vector<int> &A, vector<int> &B) {
	vector<int> C;
	for (int i = 0, t = 0; i < A.size(); i++) {
		t = A[i] - t;
		if (i < B.size())
			t -= B[i];
		C.push_back((t + 10) % 10);
		if (t < 0)
			t = 1;
		else
			t = 0;
	}

	while (C.size() > 1 && C.back() == 0)
		C.pop_back();

	return C;
}

endsnippet

snippet vmul "vector<int> mul"
vector<int> mul(vector<int> &A, int b) {
	vector<int> C;
	
	for (int i = 0, t = 0; i < A.size() || t; i++) {
		if (i < A.size())
			t += A[i] * b;
		C.push_back(t % 10);
		t /= 10;
	}

	while (C.size() > 1 && C.back() == 0)
		C.pop_back();
	
	return C;
}

endsnippet

snippet vdiv "vector<int> div"
vector<int> div(vector<int> &A, int b, int &r) {
	vector<int> C;
	r = 0;
	for (int i = A.size() - 1; i >= 0; i--) {
		r = r * 10 + A[i];
		C.push_back(r / b);
		r %= b;
	}

	reverse(C.begin(), C.end());
	while (C.size() > 1 && C.back() == 0)
		C.pop_back();
	
	return C;
}

endsnippet

snippet vcmp "vector cmp"
bool cmp(vector<int> &A, vector<int> &B) {
	if (A.size() != B.size())
		return A.size() > B.size();
	
	for (int i = A.size() - 1; i >= 0; i--) {
		if (A[i] != B[i])
			return A[i] > B[i];
	}

	return true;
}

endsnippet
